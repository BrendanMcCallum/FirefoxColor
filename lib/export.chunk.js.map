{"version":3,"sources":["webpack:///./src/web/lib/export.js"],"names":["log","Object","_lib_utils__WEBPACK_IMPORTED_MODULE_3__","performThemeExport","_ref","_ref$name","name","store","bgImages","pendingImages","currId","zip","jszip__WEBPACK_IMPORTED_MODULE_0___default","a","state","getState","themeData","_lib_store__WEBPACK_IMPORTED_MODULE_1__","theme","customBackgrounds","themeCustomImages","_lib_themes__WEBPACK_IMPORTED_MODULE_2__","images","additional_backgrounds","theme_frame","addImage","idx","length","manifest","manifest_version","version","file","JSON","stringify","Promise","all","then","generateAsync","type","data","genId","extensions","image/png","image/jpeg","image/bmp","startsWith","_data$split2","_slicedToArray","split","meta","b64data","substr","filename","concat","s","byteChars","atob","l","byteNumbers","Array","i","charCodeAt","Uint8Array","base64ToUint8array","push","fetch","response","blob"],"mappings":"kqCAMA,IAAMA,EAAMC,OAAAC,EAAA,EAAAD,CAAQ,UAEL,SAASE,EAATC,GAKZ,IAAAC,EAAAD,EAJDE,YAIC,IAAAD,EAJM,eAINA,EAFDE,EAECH,EAFDG,MACAC,EACCJ,EADDI,SAEAR,EAAI,sBA4CJS,KACAC,EAAS,EA1CT,IAAMC,EAAM,IAAIC,EAAAC,EACVC,EAAQP,EAAMQ,WACdC,EAAYC,EAAA,EAAUC,MAAMJ,GAC5BK,EAAoBF,EAAA,EAAUG,kBAAkBN,GAChDI,EAAQjB,OAAAoB,EAAA,EAAApB,CAAsBe,EAAWR,EAAUW,GAEzD,GAAID,EAAMI,OAAQ,KACRA,EAAWJ,EAAXI,OACAC,EAA2BD,EAA3BC,uBAIR,GAHID,EAAOE,cACTF,EAAOE,YAAcC,EAASd,EAAKW,EAAOE,cAExCD,EACF,IAAK,IAAIG,EAAM,EAAGA,EAAMH,EAAuBI,OAAQD,IACrDH,EAAuBG,GAAOD,EAC5Bd,EACAY,EAAuBG,IAM/B,IAAME,GACJC,iBAAkB,EAClBC,QAAS,MACTxB,OACAY,SAKF,OAHAlB,EAAI,WAAY4B,GAChBjB,EAAIoB,KAAK,gBAAiBC,KAAKC,UAAUL,EAAU,KAAM,OAElDM,QAAQC,IAAI1B,GAChB2B,KAAK,kBAAMzB,EAAI0B,eAAgBC,KAAM,aACrCF,KAAK,SAAAG,GAAI,MAAI,uCAAyCA,IAG3D,IAAI9B,KACAC,EAAS,EACP8B,EAAQ,kBAAM9B,KAOpB,IAAM+B,GACJC,YAAa,OACbC,aAAc,OACdC,YAAa,QAGf,SAASnB,EAASd,EAAK4B,GACrB,GAAIA,EAAKM,WAAW,SAAU,KAAAC,EAAAC,EAEJR,EAAKS,MAAM,IAAK,GAFZ,GAErBC,EAFqBH,EAAA,GAEfI,EAFeJ,EAAA,GAGrBR,EAHqBS,EAGbE,EAAKE,OAAO,GAAGH,MAAM,IAAK,GAHb,MAItBI,EAAQ,UAAAC,OAAab,KAAba,OAAuBZ,EAAWH,IAEhD,OADA3B,EAAIoB,KAAKqB,EAmBb,SAA4BE,GAI1B,IAHA,IAAIC,EAAYC,KAAKF,GACjBG,EAAIF,EAAU5B,OACd+B,EAAc,IAAIC,MAAMF,GACnBG,EAAI,EAAGA,EAAIH,EAAGG,IACrBF,EAAYE,GAAKL,EAAUM,WAAWD,GAExC,OAAO,IAAIE,WAAWJ,GA1BDK,CAAmBb,IAC/BE,EAGT,GAAIb,EAAKM,WAAW,WAAY,CAE9B,IAAMO,EAAWb,EAMjB,OALA9B,EAAcuD,KACZC,MAAMb,GACHhB,KAAK,SAAA8B,GAAQ,OAAIA,EAASC,SAC1B/B,KAAK,SAAAG,GAAI,OAAI5B,EAAIoB,KAAKqB,EAAUb,MAE9Ba,EAIT,OAAOb","file":"./lib/export.chunk.js","sourcesContent":["import JSZip from \"jszip\";\n\nimport { selectors } from \"../../lib/store\";\nimport { convertToBrowserTheme } from \"../../lib/themes\";\nimport { makeLog } from \"../../lib/utils\";\n\nconst log = makeLog(\"export\");\n\nexport default function performThemeExport({\n  name = \"Default Name\",\n  // TODO: Need other manifest attributes?\n  store,\n  bgImages\n}) {\n  log(\"performThemeExport\");\n  reset();\n\n  const zip = new JSZip();\n  const state = store.getState();\n  const themeData = selectors.theme(state);\n  const customBackgrounds = selectors.themeCustomImages(state);\n  const theme = convertToBrowserTheme(themeData, bgImages, customBackgrounds);\n\n  if (theme.images) {\n    const { images } = theme;\n    const { additional_backgrounds } = images;\n    if (images.theme_frame) {\n      images.theme_frame = addImage(zip, images.theme_frame);\n    }\n    if (additional_backgrounds) {\n      for (let idx = 0; idx < additional_backgrounds.length; idx++) {\n        additional_backgrounds[idx] = addImage(\n          zip,\n          additional_backgrounds[idx]\n        );\n      }\n    }\n  }\n\n  const manifest = {\n    manifest_version: 2,\n    version: \"1.0\",\n    name,\n    theme\n  };\n  log(\"manifest\", manifest);\n  zip.file(\"manifest.json\", JSON.stringify(manifest, null, \"  \"));\n\n  return Promise.all(pendingImages)\n    .then(() => zip.generateAsync({ type: \"base64\" }))\n    .then(data => \"data:application/x-xpinstall;base64,\" + data);\n}\n\nlet pendingImages = [];\nlet currId = 0;\nconst genId = () => currId++;\n\nfunction reset() {\n  pendingImages = [];\n  currId = 0;\n}\n\nconst extensions = {\n  \"image/png\": \".png\",\n  \"image/jpeg\": \".jpg\",\n  \"image/bmp\": \".bmp\"\n};\n\nfunction addImage(zip, data) {\n  if (data.startsWith(\"data:\")) {\n    // Convert data: URL into binary file entry in zip\n    const [meta, b64data] = data.split(\",\", 2);\n    const [type] = meta.substr(5).split(/;/, 1);\n    const filename = `images/${genId()}${extensions[type]}`;\n    zip.file(filename, base64ToUint8array(b64data));\n    return filename;\n  }\n\n  if (data.startsWith(\"images/\")) {\n    // Convert file path into pending image fetch.\n    const filename = data;\n    pendingImages.push(\n      fetch(filename)\n        .then(response => response.blob())\n        .then(data => zip.file(filename, data))\n    );\n    return filename;\n  }\n\n  // TODO: Throw error? The previous conditions should be all known images\n  return data;\n}\n\nfunction base64ToUint8array(s) {\n  var byteChars = atob(s);\n  var l = byteChars.length;\n  var byteNumbers = new Array(l);\n  for (var i = 0; i < l; i++) {\n    byteNumbers[i] = byteChars.charCodeAt(i);\n  }\n  return new Uint8Array(byteNumbers);\n}\n"],"sourceRoot":""}